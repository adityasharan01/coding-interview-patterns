Given a list of integers nums, return the number of times that the list changes from positive-to-negative or negative-to-positive slope.

Constraints

n â‰¤ 100,000 where n is the length of nums
Example 1
Input
nums = [1, 3, 9, 7, 5, 10, 12]
Output
2
Explanation
Change of direction happens at 9 (positive-to-negative slope), and then at 5 (negative-to-positive slope).

Example 2
Input
nums = [1, 2, 3, 3, 2, 1]
Output
0
Explanation
The slope is 0 between [3, 3]. So there are no positive-to-negative or negative-to-positive changes in slope since 0 is neither positive nor negative.

Solution:
import java.util.*;

class Solution {
    public int solve(int[] nums) {
        int flag = 0;
        int count = 0;
        if(nums.length==0 || nums.length==1){
            return 0;
        }
        for (int i = 0; i < nums.length - 1; i++) {
            if (nums[i] < nums[i + 1]) 
            {
                if (flag == -1) 
                    count++;
                flag = 1;
            } 
            else if (nums[i] > nums[i + 1]){
                if (flag == 1)
                    count++;
                flag = -1;
            } 
            else
            {
                flag = 0;
            }
        }
        return count;
    }
}
